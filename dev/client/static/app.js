const App = {
    data () {
        return {
            // counter: 0,
            currentPage: 0,
            addPlace: 0,
            addRoute :1,
            placeholderString : "введите название заметок",
            title: "список заметок",
            inputValue: "",

            numberOfSightsOnTheRoute : 5,
            showMapToSelectStartPosition : false,
            showMapToSelectEndPosition : false,

            newsListLeft : [],

            newsListRight : [],

            editingRouteList : [

            ],

            selectedOnRouteEditMapSight : '',

            editRouteName :'',
            editRouteDescription: '',

            notes : ['task 1', 'task 2'],


            startTime : '',
            endTime : '',
            fromWhere : '',
            where : '',


            selectedTagsExactlyYes :[],
            avaliableTagsExactlyYes :[],//["Volga", "Ne Volga", "Home", "work", "study"],
            selectedTagsExactlyNo :[],
            avaliableTagsExactlyNo :[],//["Ne Volga", "Volga", "no Homo", "no Homo"]
            
            searchRoutesResult : { autogeneratedRoutes : [], userRoutes : []},

            showedRoute : '',

            showedRouteList : [],

            currentUser : '',


            selectedStrtPoint : '',
            selectedEndPoint : '',

            selectedTagsOfNewSight :[],
            avaliableTagsOfNewSight :[],

            newPlace : {
                type : '',
                id : '',
                // # geometry = node['geometry'],
                lon : 0,
                lat : 0,
                name : '', // +
                rate : 5,
                properties : '',
                kinds : []//node['properties']['kinds']
            }

        }
    },
    mounted() {
        this.getCurrentUser();
        if (this.currentPage == 0) {
            // document.getElementById("news").style.color="#0D99FF";
            if (this.newsListRight.length === 0 && this.newsListLeft.length === 0)
            this.getNews();
        }
    },

    updated(){
        if (this.currentPage == 0) {
            // document.getElementById("news").style.color="#0D99FF";
            if (this.newsListRight.length === 0 && this.newsListLeft.length === 0)
            this.getNews();
        }
        if (this.currentPage == 1) {
            if (this.avaliableTagsExactlyYes.length === 0 && this.avaliableTagsExactlyNo.length === 0)
            this.getPreferences();
            if (this.showMapToSelectStartPosition || this.showMapToSelectEndPosition) {
                this.startMapForSelectingStartPosition()
            }
        }
        if (this.currentPage == 2) {
            console.log("map updated");
            this.startMap();
        }
        if (this.currentPage == 3) {
            if (this.addPlace) {
                this.getAvaliableTags()
                this.startMapForSelectingNewSightPosition();

            }
            if (this.addRoute) {
                this.startCreatingNewRouteMap();
            }
            
        }
        if (this.currentPage == 4) {
            // this.getUserData();
        }
    },

    methods : {

        getNews() {
            console.log("get news");
            fetch("/get/news", 
                {
                    method: "POST",
                    
                    headers: {
                        "Content-Type": "application/x-www-form-urlencoded"
                        // Authorization: 'Bearer '+ localStorage.access_token ,
                    }
                    }
                    ).then((response) => response.json()).then((json) => {
                        
                        console.log(json) 
                        for (let i = 0; i < json.length; i++) {
                            if (i % 2 == 0) {
                                this.newsListLeft.push(json[i]);
                            }
                            else {
                                this.newsListRight.push(json[i]);
                            }
                          }
                        console.log(this.newsListLeft[0]);
                        console.log(this.newsListRight[0]);
            });
        },


        startMapForSelectingNewSightPosition() {
            console.log("map called", document.getElementById("demoMap"));
            
            
            var lat            = 59.9275;
            var lon            = 30.3346;
            var zoom           = 12;

            var fromProjection = new OpenLayers.Projection("EPSG:4326");   // Transform from WGS 1984
            var toProjection   = new OpenLayers.Projection("EPSG:900913"); // to Spherical Mercator Projection
            var position       = new OpenLayers.LonLat(lon, lat).transform( fromProjection, toProjection);

            map = new OpenLayers.Map("demoMap");
            var mapnik         = new OpenLayers.Layer.OSM();
            map.addLayer(mapnik);

            
            var markers = new OpenLayers.Layer.Markers("Markers");
            
            
            //  console.log(map);
            map.addLayer(markers);

            

            map.setCenter(position, zoom);

            console.log(map);
            map.events.register("click", map, (evt)=> {
                markers.clearMarkers();
                
                // getSightsPoins(map);
                console.log(evt.xy);
                // console.log(new OpenLayers.LonLat(evt.xy.x, evt.x.y)
                //console.log(evt.xy.transform(toProjection, fromProjection ));
                var lonlat = map.getLonLatFromPixel(evt.xy);
                var converted = lonlat.transform(map.getProjectionObject(), new OpenLayers.Projection("EPSG:4326"));
                console.log(converted);
                // if (this.showMapToSelectStartPosition)
                //     this.selectedStrtPoint = converted;
                // if (this.showMapToSelectEndPosition)
                //     this.selectedEndPoint = converted;
                this.newPlace.lon = converted.lon;
                this.newPlace.lat = converted.lat;

                // markers.addMarker(new OpenLayers.Marker(converted));
                // var lonLat = new OpenLayers.LonLat(converted.lon, converted.lat);
                var lonLat = new OpenLayers.LonLat(converted.lon, converted.lat).transform( fromProjection, toProjection);
                var marker = new OpenLayers.Marker(lonLat); //, icon.clone()
                        
                markers.addMarker(marker);
            });

            
                
            
        },

        startMapForSelectingStartPosition() {
            console.log("map called", document.getElementById("demoMap"));
            
            
            var lat            = 59.9275;
            var lon            = 30.3346;
            var zoom           = 12;

            var fromProjection = new OpenLayers.Projection("EPSG:4326");   // Transform from WGS 1984
            var toProjection   = new OpenLayers.Projection("EPSG:900913"); // to Spherical Mercator Projection
            var position       = new OpenLayers.LonLat(lon, lat).transform( fromProjection, toProjection);

            map = new OpenLayers.Map("demoMap");
            var mapnik         = new OpenLayers.Layer.OSM();
            map.addLayer(mapnik);

            
            var markers = new OpenLayers.Layer.Markers("Markers");
            
            
            //  console.log(map);
            map.addLayer(markers);

            

            map.setCenter(position, zoom);

            console.log(map);
            map.events.register("click", map, (evt)=> {
                markers.clearMarkers();
                
                // getSightsPoins(map);
                console.log(evt.xy);
                // console.log(new OpenLayers.LonLat(evt.xy.x, evt.x.y)
                //console.log(evt.xy.transform(toProjection, fromProjection ));
                var lonlat = map.getLonLatFromPixel(evt.xy);
                var converted = lonlat.transform(map.getProjectionObject(), new OpenLayers.Projection("EPSG:4326"));
                console.log(converted);
                if (this.showMapToSelectStartPosition)
                    this.selectedStrtPoint = converted;
                if (this.showMapToSelectEndPosition)
                    this.selectedEndPoint = converted;

                // markers.addMarker(new OpenLayers.Marker(converted));
                // var lonLat = new OpenLayers.LonLat(converted.lon, converted.lat);
                var lonLat = new OpenLayers.LonLat(converted.lon, converted.lat).transform( fromProjection, toProjection);
                var marker = new OpenLayers.Marker(lonLat); //, icon.clone()
                        
                markers.addMarker(marker);
            });

            
                
            
        },

        getCurrentUser() {
            fetch("/get/current/user", 
                    {
                        method: "POST",
                        body: JSON.stringify({ 
                            getUser : true,
                        }),
                        headers: {
                            "Content-Type": "application/x-www-form-urlencoded"
                            // Authorization: 'Bearer '+ localStorage.access_token ,
                        }
                        }
                        ).then((response) => response.json()).then((json) => {
                        
                            // updateSightsPoints(JSON.parse(json)['sights']);
                            console.log(json);
                            // console.log(this.showedRouteList)
                            this.currentUser = json;
                });
        },

        getShowedRouteList() {
            // console.log(id);
            for (let i = 0; i < this.showedRoute["sightsSubsequenceIds"].length; i += 1){
                fetch("/get/sight/by/id", 
                    {
                        method: "POST",
                        body: JSON.stringify({ 
                            id : this.showedRoute["sightsSubsequenceIds"][i],
                        }),
                        headers: {
                            "Content-Type": "application/x-www-form-urlencoded"
                            // Authorization: 'Bearer '+ localStorage.access_token ,
                        }
                        }
                        ).then((response) => response.json()).then((json) => {
                        
                            // updateSightsPoints(JSON.parse(json)['sights']);
                            console.log(json);
                            console.log(this.showedRouteList)
                            this.showedRouteList.push(json);
                });
            }
              
        },

        tryToSearch() {
            fetch("/search/sutable/routes", 
                {
                    method: "POST",
                    body: JSON.stringify({ 
                        startTime : this.startTime,
                        endTime : this.endTime,
                        selectedStrtPoint : this.selectedStrtPoint,
                        selectedEndPoint : this.selectedEndPoint,
                        numberOfSightsOnTheRoute : this.numberOfSightsOnTheRoute,
            
                        selectedTagsExactlyYes : this.selectedTagsExactlyYes,
                        selectedTagsExactlyNo : this.selectedTagsExactlyNo,
                        
                    }),
                    headers: {
                        "Content-Type": "application/x-www-form-urlencoded"
                        // Authorization: 'Bearer '+ localStorage.access_token ,
                    }
                    }
                    ).then((response) => response.json()).then((json) => {
                        // console.log('json[sights] = ', json['sights']);
                        // console.log('json[sights] = ',  JSON.parse(json)['sights']);

                        // updateSightsPoints(JSON.parse(json)['sights']);
                        console.log(json);
                        this.searchRoutesResult = json;
                    // this.deleteEditing();
                    this.tryToCancel()
            });
        },

        tryToCancel() {
            this.startTime = '';
            this.endTime = '';
            this.fromWhere = '';
            this.where = '';
            this.selectedTagsExactlyYes = [];
            this.selectedTagsExactlyNo = [];
            // this.avaliableTagsExactlyYes = [];
            // this.avaliableTagsExactlyNo = [];
            this.getPreferences();
        },

        getAvaliableTags() {
            console.log("getAvaliableTags");
            fetch("/get/preferences", 
                {
                    method: "POST",
                    
                    headers: {
                        "Content-Type": "application/x-www-form-urlencoded"
                        // Authorization: 'Bearer '+ localStorage.access_token ,
                    }
                    }
                    ).then((response) => response.json()).then((json) => {
                        // console.log(json)       
                        this.avaliableTagsOfNewSight = json["TagsExactlyYes"];
                        
            });
        },

        getPreferences() {
            console.log("getPreferences");
            fetch("/get/preferences", 
                {
                    method: "POST",
                    
                    headers: {
                        "Content-Type": "application/x-www-form-urlencoded"
                        // Authorization: 'Bearer '+ localStorage.access_token ,
                    }
                    }
                    ).then((response) => response.json()).then((json) => {
                        // console.log(json)       
                        this.avaliableTagsExactlyYes = json["TagsExactlyYes"];
                        this.avaliableTagsExactlyNo = json["TagsExactlyNo"];
            });
        },

        swapTwoPlacesInEditingRouteList(id1, id2) {
            if (id1 >= 0 && id2 >= 0 && id1 < this.editingRouteList.length && id2 < this.editingRouteList.length) {

                // let swap = editingRouteList[editingRouteList.find((element) => element.id === id1)]
                // editingRouteList[editingRouteList.find((element) => element.id === id1)] = editingRouteList[editingRouteList.find((element) => element.id === id2)]
                // editingRouteList[editingRouteList.find((element) => element.id === id2)] = swap
                let swap = this.editingRouteList[id1];
                this.editingRouteList[id1] = this.editingRouteList[id2];
                this.editingRouteList[id2] = swap;
            }
        },

        tryToSaveRoute () {
            console.log(this.editRouteName);
            console.log(this.editRouteDescription);
            fetch("/create/route", 
                {
                    method: "POST",
                    body: JSON.stringify({ 
                        newRouteList : this.editingRouteList,
                        // name : 'name'
                        newRouteName : this.editRouteName,
                        newRouteDescription : this.editRouteDescription
                    }),
                    headers: {
                        "Content-Type": "application/x-www-form-urlencoded"
                        // Authorization: 'Bearer '+ localStorage.access_token ,
                    }
                    }
                    ).then((response) => response.json()).then((json) => {
                        // console.log('json[sights] = ', json['sights']);
                        // console.log('json[sights] = ',  JSON.parse(json)['sights']);

                        // updateSightsPoints(JSON.parse(json)['sights']);
                    this.deleteEditing();
            });
                
        },
        deleteEditing() {
            this.editingRouteList = [];
            this.editRouteName = '';
            this.editRouteDescription = '';
        },

        startMap() {
            console.log("map called", document.getElementById("demoMap"));
            
            
            var lat            = 59.9275;
            var lon            = 30.3346;
            var zoom           = 12;

            var fromProjection = new OpenLayers.Projection("EPSG:4326");   // Transform from WGS 1984
            var toProjection   = new OpenLayers.Projection("EPSG:900913"); // to Spherical Mercator Projection
            var position       = new OpenLayers.LonLat(lon, lat).transform( fromProjection, toProjection);

            map = new OpenLayers.Map("demoMap");
            var mapnik         = new OpenLayers.Layer.OSM();
            map.addLayer(mapnik);

            // var markers = new OpenLayers.Layer.Markers( "Markers" );
            // map.addLayer(markers);
            // markers.addMarker(new OpenLayers.Marker(position));
            var markers = new OpenLayers.Layer.Markers("Markers");
            
            function updateSightsPoints(listd) {
                // window.map.getLayers().getArray()
                // .filter(layer => layer.get('name') === 'Markers')
                // .forEach(layer => map.removeLayer(layer));

                markers.clearMarkers();
                
                console.log(listd.length);
                for(var i = 0; i < listd.length; i++)
                { 
                    (function(i){
                        var lonLat = new OpenLayers.LonLat(listd[i].lon, listd[i].lat).transform( fromProjection, toProjection);
                        console.log(lonLat);
                        
                        //  var title = listd[i].Title;
                        //  var iconPath = listd[i].IconPath;
                        //  var size = new OpenLayers.Size(15, 22);
                        //  var offset = new OpenLayers.Pixel(-(size.w / 2), -size.h);
                
                        //  var icon = new OpenLayers.Icon(iconPath, size, offset);
                        var marker = new OpenLayers.Marker(lonLat); //, icon.clone()
                        marker.id = listd[i].id
                        // console.log(marker);
                        markers.addMarker(marker);
                        //  console.log(markers);
                        
                        marker.events.register("click", marker, function(e){
                        //     // popup = new OpenLayers.Popup.FramedCloud("chicken",
                        //     //     marker.lonlat,
                        //     //     new OpenLayers.Size(200, 200),
                        //     //     title,
                        //     //     null, false );
                        //     //   map.addPopup(popup);
                        
                        
                            console.log(marker.id);
                        });
                    })(i);
                } 
                

            }
            //  console.log(map);
            map.addLayer(markers);

            

            map.setCenter(position, zoom);

            console.log(map);
            map.events.register("moveend", map, function() {
                getSightsPoins(map);
                
            });

            getSightsPoins = (map) => {
                let extent = map.getExtent().transform(toProjection, fromProjection);
                console.log("getExtent = ", extent);

                fetch("/get/dysplayable/points", 
                {
                    method: "POST",
                    body: JSON.stringify({ 
                        extent : extent
                    }),
                    headers: {
                        "Content-Type": "application/x-www-form-urlencoded"
                        // Authorization: 'Bearer '+ localStorage.access_token ,
                    }
                    }
                    ).then((response) => response.json()).then((json) => {
                        // console.log('json[sights] = ', json['sights']);
                        // console.log('json[sights] = ',  JSON.parse(json)['sights']);

                        updateSightsPoints(JSON.parse(json)['sights']);
                      
                    });
                }

                getSightsPoins(map);
            
        },

        startCreatingNewRouteMap() {
            console.log("map called", document.getElementById("demoMap"));
            
            
            var lat            = 59.9275;
            var lon            = 30.3346;
            var zoom           = 12;

            var fromProjection = new OpenLayers.Projection("EPSG:4326");   // Transform from WGS 1984
            var toProjection   = new OpenLayers.Projection("EPSG:900913"); // to Spherical Mercator Projection
            var position       = new OpenLayers.LonLat(lon, lat).transform( fromProjection, toProjection);

            map = new OpenLayers.Map("demoMap");
            var mapnik         = new OpenLayers.Layer.OSM();
            map.addLayer(mapnik);

            
            var markers = new OpenLayers.Layer.Markers("Markers");
            
            updateSightsPoints = (listd) => {
               
                markers.clearMarkers();
                
                console.log(listd.length);
                for(var i = 0; i < listd.length; i++)
                { 
                    ((i)=> {
                        var lonLat = new OpenLayers.LonLat(listd[i].lon, listd[i].lat).transform( fromProjection, toProjection);
                        // console.log(lonLat);
                        
                        //  var title = listd[i].Title;
                        //  var iconPath = listd[i].IconPath;
                        //  var size = new OpenLayers.Size(15, 22);
                        //  var offset = new OpenLayers.Pixel(-(size.w / 2), -size.h);
                
                        //  var icon = new OpenLayers.Icon(iconPath, size, offset);
                        var marker = new OpenLayers.Marker(lonLat); //, icon.clone()
                        marker.id = listd[i].id
                        markers.addMarker(marker);
                        
                        marker.events.register("click", marker, (e)=>{
                            this.getSightById(marker.id)
                        });
                    })(i);
                } 
                

            }
            //  console.log(map);
            map.addLayer(markers);

            

            map.setCenter(position, zoom);

            console.log(map);
            map.events.register("moveend", map, function() {
                getSightsPoins(map);
                
            });

            getSightsPoins = (map) => {
                let extent = map.getExtent().transform(toProjection, fromProjection);
                console.log("getExtent = ", extent);

                fetch("/get/dysplayable/points", 
                {
                    method: "POST",
                    body: JSON.stringify({ 
                        extent : extent
                    }),
                    headers: {
                        "Content-Type": "application/x-www-form-urlencoded"
                        // Authorization: 'Bearer '+ localStorage.access_token ,
                    }
                    }
                    ).then((response) => response.json()).then((json) => {
                       
                        updateSightsPoints(JSON.parse(json)['sights']);
                      
                    });
                }

                getSightsPoins(map);
            
        },

        getSightById (id) {
            console.log(id);
            fetch("/get/sight/by/id", 
                {
                    method: "POST",
                    body: JSON.stringify({ 
                        id : id,
                    }),
                    headers: {
                        "Content-Type": "application/x-www-form-urlencoded"
                        // Authorization: 'Bearer '+ localStorage.access_token ,
                    }
                    }
                    ).then((response) => response.json()).then((json) => {
                       
                        // updateSightsPoints(JSON.parse(json)['sights']);
                        console.log(json);
                        this.selectedOnRouteEditMapSight = json
                        console.log(this.selectedOnRouteEditMapSight, "this.selectedOnRouteEditMapSight");
                });
                
        },

        logout () {
            // localStorage.clear();
            // window.location.pathname = 'login'; 
            // window.location.reload();
            
            console.log ("logout called")
            fetch("/logout", {
            method: "GET",
            // body: JSON.stringify({
            //     logout : true,
            // }),
            headers: {
                "Content-Type": "application/x-www-form-urlencoded"
            }
            }).then((response) => {window.location.href = response.url; json = response.json(); console.log(json)})
                

             
        }
    },
    // watch: {
    //     <>: function(){
    //       console.log('any of these variables changed');
    //     }
    // }
}


// const app = Vue.createApp(App)
// app.mount("#app")

// or
// Vue.prototype.window = window
// app.config.globalProperties.selectedOnRouteEditMapSight = 'selectedOnRouteEditMapSight';

Vue.createApp(App).mount("#app")
